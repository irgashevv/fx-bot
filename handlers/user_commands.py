from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from db.database import async_session_factory
from db.models import User, Request
from keyboards.reply import main_kb
from keyboards.inline import get_my_requests_kb
from config import GROUP_ID
from utils.dashboard_updater import update_dashboard, get_dashboard_kb, format_number

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
                    "–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    async with async_session_factory() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        if user is None:
            new_user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name)
            session.add(new_user)
            await session.commit()
    await message.answer(welcome_text, reply_markup=main_kb)


@router.message(Command("list"))
async def list_active_requests(message: types.Message):
    async with async_session_factory() as session:
        query = (
            select(Request)
            .where(Request.status == 'ACTIVE')
            .options(selectinload(Request.user))
            .order_by(Request.created_at.asc())
        )
        result = await session.execute(query)
        requests = result.scalars().all()

    if not requests:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    text_parts = ["<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>"]
    for req in requests:
        author_mention = f"@{req.user.username}" if req.user.username else req.user.first_name

        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        line = f"‚Äî {author_mention} {req.message_text}."

        # --- –¢–ê–ö–ê–Ø –ñ–ï –ö–†–ê–°–ò–í–ê–Ø –õ–û–ì–ò–ö–ê ---
        if req.group_message_id and GROUP_ID:
            chat_id_for_link = str(GROUP_ID).replace("-100", "")
            link = f"https://t.me/c/{chat_id_for_link}/{req.group_message_id}"
            line += f' <a href="{link}">*—Ç—ã–∫*</a>'
        # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò ---

        if req.comment:
            line += f"\n<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.comment}</i>"

        text_parts.append(line)

    text = "\n\n".join(text_parts)
    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)


@router.message(F.text == "üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def handle_list_requests(message: types.Message):
    await list_active_requests(message)


@router.message(Command("my"))
async def my_active_requests(message: types.Message):
    async with async_session_factory() as session:
        query = select(Request).where(
            Request.user_id == message.from_user.id,
            Request.status == 'ACTIVE'
        ).order_by(Request.created_at.desc())
        result = await session.execute(query)
        requests = result.scalars().all()

    if not requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    text = "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for req in requests:

        text += (
            f"<b>–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {req.id}</b>\n"
            f"{req.message_text}\n\n")

    await message.answer(text, parse_mode="HTML", reply_markup=get_my_requests_kb(requests))


@router.message(F.text == "‚öôÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def handle_my_requests(message: types.Message):
    await my_active_requests(message)


@router.callback_query(F.data.startswith("close_req_"))
async def close_request(callback: types.CallbackQuery, bot: Bot):
    request_id = int(callback.data.split('_')[-1])

    async with async_session_factory() as session:
        result = await session.execute(
            select(Request)
            .where(Request.id == request_id)
            .options(selectinload(Request.user)))
        request_to_close = result.scalar_one_or_none()

        if not request_to_close or request_to_close.user_id != callback.from_user.id:
            return await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

        if request_to_close.status == 'CLOSED':
            await callback.message.delete()
            return await callback.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)

        request_to_close.status = 'CLOSED'
        await session.commit()

    if request_to_close and request_to_close.group_message_id:
        try:
            req = request_to_close
            author_mention = f"@{req.user.username}" if req.user.username else req.user.first_name

            original_body = f"üë§ {author_mention} {req.message_text}"
            if req.comment:
                original_body += f"\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {req.comment}"

            final_text = (
                f"<s>{original_body}</s>\n\n"
                f"<b>--- –ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ---</b>")

            await bot.edit_message_text(
                text=final_text,
                chat_id=GROUP_ID,
                message_id=request_to_close.group_message_id,
                parse_mode="HTML")
        except Exception as e:
            print(f"Could not edit group message for closed request #{request_id}: {e}")

    await update_dashboard(bot)
    await callback.message.delete()
    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
    await callback.answer()


@router.message(Command("post_dashboard"))
async def post_dashboard_command(message: types.Message, bot: Bot):
    try:
        sent_message = await bot.send_message(
            chat_id=GROUP_ID,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            reply_markup=get_dashboard_kb())
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                             f"ID –°–æ–æ–±—â–µ–Ω–∏—è: `{sent_message.message_id}`\n"
                             f"–¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∏ –≤–ø–∏—à–∏—Ç–µ ID –≤ .env —Ñ–∞–π–ª.",
                             parse_mode="Markdown")
        await update_dashboard(bot)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞—à–±–æ—Ä–¥–∞: {e}")


@router.callback_query(F.data == "refresh_dashboard")
async def refresh_dashboard_callback(callback: types.CallbackQuery, bot: Bot):
    await update_dashboard(bot)
    await callback.answer("–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
