from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from db.database import async_session_factory
from db.models import User, Request
from keyboards.reply import main_kb
from keyboards.inline import get_my_requests_kb
from config import GROUP_ID
from .request_handlers import create_request_start
from utils.dashboard_updater import update_dashboard, get_dashboard_kb

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
                    "–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    async with async_session_factory() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        if user is None:
            new_user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name)
            session.add(new_user)
            await session.commit()
    await message.answer(welcome_text, reply_markup=main_kb)


@router.message(Command("list"))
async def list_active_requests(message: types.Message):
    async with async_session_factory() as session:
        query = (
            select(Request)
            .where(Request.status == 'ACTIVE')
            .options(selectinload(Request.user))
            .order_by(Request.created_at.desc()))
        result = await session.execute(query)
        requests = result.scalars().all()

    if not requests:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    text = "<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for req in requests:
        req_type_text = '–ü–æ–∫—É–ø–∫–∞' if req.request_type == 'BUY' else '–ü—Ä–æ–¥–∞–∂–∞'
        username = f"@{req.user.username}" if req.user.username else req.user.first_name

        preview_line_1 = f"<b>–ü–æ–∫—É–ø–∞–µ—Ç:</b> <code>{req.amount_from} {req.currency_to}</code>" if req.request_type == 'BUY' else f"<b>–ü—Ä–æ–¥–∞–µ—Ç:</b> <code>{req.amount_from} {req.currency_from}</code>"
        preview_line_2 = f"<b>–í –æ–±–º–µ–Ω –Ω–∞:</b> <code>{req.currency_from}</code>" if req.request_type == 'BUY' else f"<b>–•–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å:</b> <code>{req.currency_to}</code>"

        text += (
            f"<b>–ó–∞—è–≤–∫–∞ #{req.id}</b> –æ—Ç {username}\n"
            f"<b>–¢–∏–ø:</b> {req_type_text}\n"
            f"{preview_line_1}\n"
            f"{preview_line_2}\n"
            f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {req.comment or '–ù–µ—Ç'}\n"
            "--------------------\n")
    await message.answer(text, parse_mode="HTML")


@router.message(Command("my"))
async def my_active_requests(message: types.Message):
    async with async_session_factory() as session:
        query = select(Request).where(
            Request.user_id == message.from_user.id,
            Request.status == 'ACTIVE').order_by(Request.created_at.desc())
        result = await session.execute(query)
        requests = result.scalars().all()

    if not requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    text = "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for req in requests:
        preview_line_1 = f"–ü–æ–∫—É–ø–∞—é: {req.amount_from} {req.currency_to}" if req.request_type == 'BUY' else f"–ü—Ä–æ–¥–∞—é: {req.amount_from} {req.currency_from}"
        text += (
            f"<b>–ó–∞—è–≤–∫–∞ #{req.id}</b>\n"
            f"{preview_line_1}\n"
            "--------------------\n")
    await message.answer(text, parse_mode="HTML", reply_markup=get_my_requests_kb(requests))


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def handle_create_request(message: types.Message, state: FSMContext):
    await create_request_start(message, state)


@router.message(F.text == "üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def handle_list_requests(message: types.Message):
    await list_active_requests(message)


@router.message(F.text == "‚öôÔ∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def handle_my_requests(message: types.Message):
    await my_active_requests(message)


@router.callback_query(F.data.startswith("close_req_"))
async def close_request(callback: types.CallbackQuery, bot: Bot):
    request_id = int(callback.data.split('_')[-1])

    request_to_close = None

    async with async_session_factory() as session:
        result = await session.execute(
            select(Request)
            .where(Request.id == request_id)
            .options(selectinload(Request.user)))
        request_to_close = result.scalar_one_or_none()

        if not request_to_close or request_to_close.user_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –∏–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        if request_to_close.status == 'CLOSED':
            await callback.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=True)
            return

        request_to_close.status = 'CLOSED'
        await session.commit()

    if request_to_close and request_to_close.group_message_id:
        try:
            req = request_to_close
            req_type_text = '–ü–æ–∫—É–ø–∫–∞' if req.request_type == 'BUY' else '–ü—Ä–æ–¥–∞–∂–∞'
            preview_line_1 = f"<b>–•–æ—á—É –∫—É–ø–∏—Ç—å:</b> <code>{req.amount_from} {req.currency_to}</code>" if req.request_type == 'BUY' else f"<b>–ü—Ä–æ–¥–∞—é:</b> <code>{req.amount_from} {req.currency_from}</code>"
            preview_line_2 = f"<b>–í –æ–±–º–µ–Ω –Ω–∞:</b> <code>{req.currency_from}</code>" if req.request_type == 'BUY' else f"<b>–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å:</b> <code>{req.currency_to}</code>"
            username = f"@{req.user.username}" if req.user.username else req.user.first_name

            original_text = (
                f"<b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{req.id}</b>\n\n"
                f"<b>–¢–∏–ø:</b> {req_type_text}\n"
                f"{preview_line_1}\n"
                f"{preview_line_2}\n"
                f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {req.comment or '–ù–µ—Ç'}\n\n"
                f"<b>–ê–≤—Ç–æ—Ä:</b> {username}")

            final_text = original_text + "\n\n<b>--- –°–î–ï–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ---</b>"

            await bot.edit_message_text(
                text=final_text,
                chat_id=GROUP_ID,
                message_id=request_to_close.group_message_id,
                parse_mode="HTML",
                reply_markup=None)
            await update_dashboard(bot)
        except Exception as e:
            print(f"Could not edit message in group for request #{request_id}: {e}")

    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
    await callback.answer()


@router.message(Command("post_dashboard"))
async def post_dashboard_command(message: types.Message, bot: Bot):
    try:
        sent_message = await bot.send_message(
            chat_id=GROUP_ID,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            reply_markup=get_dashboard_kb())
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                             f"ID –°–æ–æ–±—â–µ–Ω–∏—è: `{sent_message.message_id}`\n"
                             f"–¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∏ –≤–ø–∏—à–∏—Ç–µ ID –≤ .env —Ñ–∞–π–ª.",
                             parse_mode="Markdown")
        await update_dashboard(bot)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞—à–±–æ—Ä–¥–∞: {e}")


@router.callback_query(F.data == "refresh_dashboard")
async def refresh_dashboard_callback(callback: types.CallbackQuery, bot: Bot):
    await update_dashboard(bot)
    await callback.answer("–î–∞—à–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
