from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from db.database import async_session_factory
from db.models import Request
from config import GROUP_ID, DASHBOARD_MESSAGE_ID
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def format_number(num):
    try:
        return f"{int(float(num)):,}".replace(",", " ")
    except (ValueError, TypeError):
        return str(num)


def get_dashboard_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_dashboard")]
    ])


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
def parse_description(desc_str):
    try:
        parts = desc_str.replace('(', '').replace(')', '').split()
        return {'currency': parts[0], 'type': parts[1], 'location': parts[2]}
    except IndexError:
        return {'currency': '', 'type': '', 'location': ''}


async def update_dashboard(bot: Bot):
    async with async_session_factory() as session:
        query = (
            select(Request)
            .where(Request.status == 'ACTIVE')
            .options(selectinload(Request.user))
            .order_by(Request.created_at.desc())
        )
        result = await session.execute(query)
        requests = result.scalars().all()

    if not requests:
        text = "<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
    else:
        text_parts = ["<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>"]
        for req in requests:
            author_mention = f"@{req.user.username}" if req.user.username else req.user.first_name
            formatted_amount = format_number(req.amount_from)

            op_type = req.operation_type
            action_text = ""

            # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
            if op_type == 'buy':
                action = "—Ö–æ—á–µ—Ç <b>–ö–£–ü–ò–¢–¨</b>"
                action_text = f"{formatted_amount} {req.currency_to} –≤ –æ–±–º–µ–Ω –Ω–∞ {req.currency_from}"
            elif op_type == 'sell':
                action = "—Ö–æ—á–µ—Ç <b>–ü–†–û–î–ê–¢–¨</b>"
                action_text = f"{formatted_amount} {req.currency_from} –≤ –æ–±–º–µ–Ω –Ω–∞ {req.currency_to}"
            else:  # transfer
                action = "—Ö–æ—á–µ—Ç <b>–ü–ï–†–ï–í–ï–°–¢–ò</b>"
                from_details = parse_description(req.currency_from)
                to_details = parse_description(req.currency_to)

                # –°–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                action_text = (f"<b>{formatted_amount} {from_details['currency']}</b> "
                               f"–∏–∑ –≥. <b>{from_details['location']}</b> ({from_details['type'].lower()}) "
                               f"–≤ –≥. <b>{to_details['location']}</b> ({to_details['type'].lower()})")

            line = f"‚Äî {author_mention} {action} {action_text}."

            if req.comment:
                line += f"\n<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.comment}</i>"
            # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

            text_parts.append(line)

        text = "\n\n".join(text_parts)

    try:
        await bot.edit_message_text(
            text=text,
            chat_id=GROUP_ID,
            message_id=DASHBOARD_MESSAGE_ID,
            parse_mode="HTML",
            reply_markup=get_dashboard_kb()
        )
    except Exception as e:
        print(f"Failed to update dashboard: {e}")